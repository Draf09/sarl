/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2020 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.skills.bic

import io.sarl.core.DefaultContextInteractions
import io.sarl.lang.core.Address
import io.sarl.lang.core.Agent
import io.sarl.lang.core.AgentContext
import io.sarl.lang.core.Event
import io.sarl.lang.core.EventSpace
import io.sarl.lang.core.Scope
import io.sarl.lang.core.Skill
import io.sarl.lang.core.Space
import io.sarl.lang.core.SpaceID
import java.util.UUID

import static io.sarl.sre.services.lifecycle.AgentLife.*

/** 
 * Skill to access to the default interaction context.
 * 
 * @author $Author: srodriguez$
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
skill DefaultContextInteractionsSkill extends Skill implements DefaultContextInteractions {


	def getDefaultContext : AgentContext {
		val life = getLife(owner)
		assert life !== null
		val reference = life.defaultContext
		if (reference === null) {
			return null
		}
		return reference.context
	}

	def getDefaultSpace : EventSpace {
		val life = getLife(owner)
		assert life !== null
		val reference = life.defaultContext
		if (reference === null) {
			return null
		}
		return reference.defaultSpace
	}

	def getDefaultAddress : Address {
		val life = getLife(owner)
		assert life !== null
		val reference = life.defaultContext
		if (reference === null) {
			return null
		}
		return reference.addressInDefaultSpace
	}

	def isDefaultContext(context : AgentContext) : boolean {
		assert context !== null
		val id = context.ID
		assert id !== null
		return id.isDefaultContext
	}

	def isDefaultContext(contextID : UUID) : boolean {
		assert contextID !== null
		val context = defaultContext
		assert context !== null
		return contextID == context.ID
	}

	def isDefaultSpace(^space : Space) : boolean {
		assert ^space !== null
		val id = ^space.spaceID
		assert id !== null
		return id.isDefaultSpace
	}

	def isDefaultSpace(^space : SpaceID) : boolean {
		assert ^space !== null
		val dspace = defaultSpace
		assert dspace !== null
		return ^space == dspace.spaceID
	}

	def isDefaultSpace(^space : UUID) : boolean {
		assert ^space !== null
		val dspace = defaultSpace
		assert dspace !== null
		val spaceid = dspace.spaceID
		assert spaceid !== null
		return ^space == spaceid.ID
	}

	def isInDefaultSpace(^event : Event) : boolean {
		if (^event !== null) {
			val adr = ^event.source
			if (adr !== null) {
				val spaceid = adr.spaceID
				assert spaceid !== null
				return spaceid.isDefaultSpace
			}
		}
		return false
	}

	def emit(^event : Event, scope : Scope<Address> = null) {
		assert ^event !== null
		val dspace = defaultSpace
		if (dspace !== null) {
			val adr = defaultAddress
			assert adr !== null
			^event.source = adr
			dspace.emit(ID, ^event, scope)
		}
	}

	@Deprecated(since = "0.5", forRemoval = true)
	def willReceive(receiver : UUID, ^event : Event) {
		^event.emit [it.UUID == receiver]
	}
	
	@Deprecated(since = "0.5", forRemoval = true)
	def receive(receiver : UUID, ^event : Event) {
		receiver.willReceive(^event)
	}

	@Deprecated(since = "0.11", forRemoval = true)
	def spawn(agentType : Class<? extends Agent>, params : Object*) : UUID {
		throw new UnsupportedOperationException("Use Lifecycle capacity")
	}

}
