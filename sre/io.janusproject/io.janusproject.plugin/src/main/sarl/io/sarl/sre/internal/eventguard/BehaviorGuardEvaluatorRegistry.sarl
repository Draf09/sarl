/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2020 the original authors or authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.internal.eventguard

import io.sarl.lang.annotation.PerceptGuardEvaluator
import io.sarl.lang.core.Event
import io.sarl.sre.internal.MutableBoolean
import io.sarl.sre.internal.ObjectComparator
import java.lang.reflect.Method
import java.util.Collection
import java.util.Iterator
import java.util.Map.Entry
import java.util.TreeSet
import java.util.concurrent.ConcurrentHashMap
import java.util.concurrent.ConcurrentLinkedDeque
import java.util.concurrent.ConcurrentSkipListSet
import java.util.concurrent.CopyOnWriteArraySet
import org.eclipse.xtend.lib.annotations.Data

import static extension io.sarl.sre.internal.eventguard.StaticBehaviorGuardEvaluatorDictionary.*
import java.util.Set

/** 
 * Registry of all {@code BehaviorGuardEvaluator} classes containing a method to evaluate the guard of a
 * given behavior (on clause in SARL behavior).
 * 
 * <p>This class is thread-safe.
 *
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
class BehaviorGuardEvaluatorRegistry {

	/**
	 * All registered {@code BehaviorGuardEvaluator}s (class containing at least one PerceptGuardEvaluator method), indexed by event type.
	 *
	 * <p>The {@link CopyOnWriteArraySet} values make it easy and relatively lightweight to get an immutable snapshot of all current
	 * {@code BehaviorGuardEvaluator}s to an event without any locking.
	 */
	val evaluators : ConcurrentHashMap<Class<? extends Event>, CopyOnWriteArraySet<GuardedEvaluator>>

	/** 
	 * Instanciates a new registry linked with the {@link PerceptGuardEvaluator} annotation.
	 * 
	 * <p>The registry will use concurrent data structures.
	 * 
	 * @param internalMap the internal map.
	 */
	new {
		this.evaluators = new ConcurrentHashMap
	}

	/** Replies the internal data structure.
	 *
	 * @return the internal data structure
	 */
	@Pure
	def getInternalDataStructure : ConcurrentHashMap<Class<? extends Event>, CopyOnWriteArraySet<GuardedEvaluator>> {
		this.evaluators
	}

	/** 
	 * Registers all {@code PerceptGuardEvaluator} methods on the given listener object.
	 * 
	 * @param listener the new {@code BehaviorGuardEvaluator} to add
	 * @param callback function which is invoked just after the first registration of the object. It could be {@code null}.
	 * @since 0.5
	 */
	def register(listener : Object, callback : (Object)=>void = null) {
		register(listener, null, callback)
	}

	/**
	 * Registers all {@code PerceptGuardEvaluator} methods on the given listener object.
	 *
	 * <p>If the filter is provided, it will be used for determining if the given behavior accepts a specific event.
	 * If the filter function replies {@code true} for a specific event as argument, the event is fired in the
	 * behavior context. If the filter function replies {@code false}, the event is not fired in the behavior context.
	 *
	 * @param listener the new {@code BehaviorGuardEvaluator} to add
	 * @param filter the filter function.
	 * @param callback function which is invoked just after the registration of the object. It could be {@code null}.
	 * @since 0.5
	 */
	def register(listener : Object, filter : (Event) => boolean, callback : (Object) => void = null) {
		assert listener !== null
		val hasCallback = new MutableBoolean(callback !== null)
		var methodIterator = new MethodIterator(listener)
		while (methodIterator.hasNext) {
			val method = methodIterator.next

			val evaluators = internalDataStructure.computeIfAbsent(method.type) [
				new CopyOnWriteArraySet
			]

			for (meth : method.methods) {
				var success = evaluators += new GuardedEvaluator(filter, new BehaviorGuardEvaluator(listener, meth))
				if (!success) {
					hasCallback.set(false)
				}
			}
		}
		if (hasCallback.get) {
			callback.apply(listener)
		}
	}

	/**
	 * Unregisters all BehaviorGuardEvaluators on all the listener objects.
	 *
	 * @param callback function which is invoked just before the object is unregistered. It could be {@code null}.
	 *     The callback functions replies {@code true} if it should be called on the next removed object.
	 *     If it replies {@code false}, it will be not called anymore.
	 * @since 0.5
	 */
	def unregisterAll(callback : (Object)=>boolean) : void {
		val removedListeners = new TreeSet(ObjectComparator::SINGLETON)
		if (callback !== null) {
			val hasCallback = new MutableBoolean(true)
			val iterator0 = internalDataStructure.values.iterator
			while (hasCallback.get && iterator0.hasNext) {
				val iterator1 = iterator0.next.iterator
				while (hasCallback.get && iterator1.hasNext) {
					val evaluator = iterator1.next
					val target = evaluator.evaluator.target
					if (removedListeners.add(target)) {
						val continueCallbacks = callback.apply(target)
						if (!continueCallbacks) {
							hasCallback.set(false)
						}
					}
				}
			}
		}
		// TODO: Is it the most efficient way to clear the map?
		internalDataStructure.clear
	}

	/**
	 * Unregisters all BehaviorGuardEvaluators on the given listener object.
	 *
	 * @param listener the new {@code BehaviorGuardEvaluator} to remove
	 * @param callback function which is invoked just before the object is unregistered. It could be {@code null}.
	 * @since 0.5
	 */
	def unregister(listener : Object, callback : (Object)=>void) : void {
		assert listener !== null
		assert !(listener instanceof Class), "illegal argument type. Class is not allowed as listener."
		val hasCallback = new MutableBoolean(callback !== null)
		// Loop on listener's methods in order to retrieve the event types and loop
		// on a smaller set of entries from "this.evaluators"
		var methodIterator = new MethodIterator(listener)
		while (methodIterator.hasNext) {
			val method = methodIterator.next
			val registeredEvaluators = internalDataStructure.get(method.type)
			if (registeredEvaluators !== null) {

				val removables = newLinkedList

				// TODO: New implementation without two loops (for-loop and removeAll loop) may be more efficient
				for (registeredEvaluator : registeredEvaluators) {
					val target = registeredEvaluator.evaluator.target
					if (target === listener) {
						removables += registeredEvaluator
						if (hasCallback.get) {
							hasCallback.set(false)
							callback.apply(target)
						}
					}
				}

				registeredEvaluators.removeAll(removables)

				// TODO: Is the following behavior efficient?
				// don't try to remove the set if it's empty; that can't be done safely without a lock
				// anyway, if the set is empty it'll just be wrapping an array of length 0
			}
		}
	}

	/** 
	 * Unregisters all BehaviorGuardEvaluators on the listener objects of the given type.
	 * 
	 * @param listenerType the type of the {@code BehaviorGuardEvaluator} to remove
	 * @param callback function which is invoked just before the object is unregistered. It could be {@code null}.
	 *     The callback functions replies {@code true} if it should be called on the next removed object.
	 *     If it replies {@code false}, it will be not called anymore.
	 * @since 0.7
	 */
	def unregister(listenerType : Class<?>, callback : (Object)=>boolean) {
		assert listenerType !== null
		val notifiedListeners = new TreeSet(ObjectComparator::SINGLETON)
		val hasCallback = new MutableBoolean(callback !== null)
		for (guardedEvaluators : internalDataStructure.values) {
			guardedEvaluators.removeIf [
				val target = it.evaluator.target
				assert target !== null
				if (listenerType.isInstance(target)) {
					if (hasCallback.get && notifiedListeners.add(target)) {
						val continueCalls = callback.apply(target)
						if (!continueCalls) {
							hasCallback.set(false)
						}
					}
					return true
				}
				return false
			]

			// TODO: Is the following behavior efficient?
			// don't try to remove the set if it's empty; that can't be done safely without a lock
			// anyway, if the set is empty it'll just be wrapping an array of length 0
		}
	}

	/** Replies if a listener with the given type is registered.
	 * 
	 * @param type the type of listener.
	 * @return {@code true} if a listener of the given type is registered.
	 * @since 0.5
	 */
	@Pure
	def hasRegisteredEventListener(type : Class<?>) : boolean {
		if (type !== null) {
			for (guardedEvaluators : internalDataStructure.values) {
				for (evaluator : guardedEvaluators) {
					if (type.isInstance(evaluator.evaluator.target)) {
						return true
					}
				}
			}
		}
		return false
	}

	/** 
	 * Gets an iterator representing an immutable snapshot of all BehaviorGuardEvaluators to the given event at the time this method is called.
	 *
	 * @param event
	 *            -the event to process
	 * @return the set of guard evaluators associated to the specified event
	 */
	@Pure
	def getBehaviorGuardEvaluators(^event : Event) : ConcurrentLinkedDeque<BehaviorGuardEvaluator> {
		assert ^event !== null
		val eventTypes = ^event.class.flattenHierarchy
		val allEvaluators = new ConcurrentLinkedDeque
		for (eventType : eventTypes) {
			val eventSubscribers = internalDataStructure.get(eventType)
			if (eventSubscribers !== null) {
				for (guardedEvaluator : eventSubscribers) {
					val filter = guardedEvaluator.registrationGuard
					if (filter === null || filter.apply(^event)) {
						allEvaluators += guardedEvaluator.evaluator
					}
				}
			}
		}
		return allEvaluators
	}

	/**
	 * Gets an iterator representing an immutable snapshot of all BehaviorGuardEvaluators of the given listener
	 * to the given event at the time this method is called.
	 *
	 * <p>Caution: This function does not apply filtering function given to
	 * {@link #register(Object, Function1, Procedure1)}.
	 *
	 * @param event -the event to process
	 * @param listener the owner of the BehaviorGuardEvaluators (never {@code null}).
	 * @return the set of guard evaluators associated to the specified event
	 * @since 0.5
	 */
	@Pure
	def getBehaviorGuardEvaluatorsFor(^event : Event,
		listener : Object) : ConcurrentLinkedDeque<BehaviorGuardEvaluator> {
		assert ^event !== null
		assert listener !== null
		val allEvaluators = new ConcurrentLinkedDeque
		val eventTypes = ^event.class.flattenHierarchy
		for (eventType : eventTypes) {
			val eventSubscribers = internalDataStructure.get(eventType)
			if (eventSubscribers !== null) {
				for (guardedEvaluator : eventSubscribers) {
					val target = guardedEvaluator.evaluator.target
					if (target === listener) {
						allEvaluators += guardedEvaluator.evaluator
					}
				}
			}
		}
		return allEvaluators
	}

	/** Extract the registered listeners with the given type.
	 *
	 * @param <T> the type of the listeners.
	 * @param type the type of the listeners.
	 * @param collection the collection of listeners that is filled by this function. This argument could be {@code null}.
	 * @return the number of listeners of the given type.
	 * @since 0.11
	 */
	def getRegisteredEventListeners(type : Class<T>, collection : Set<? super T>) : int with T {
		assert type !== null
		assert collection !== null
		var nb = 0
		for (guardedEvaluators : internalDataStructure.values) {
			for (evaluator : guardedEvaluators) {
				val target = evaluator.evaluator.target
				if (type.isInstance(target)) {
					if (collection += type.cast(target)) {
						nb++
					}
				}
			}
		}
		return nb
	}

	/** Extract the registered listeners with the given type.
	 * 
	 * @param <T> the type of the listeners.
	 * @param type the type of the listeners.
	 * @param collection the collection of listeners that is filled by this function. This argument could be {@code null}.
	 * @return the number of listeners of the given type.
	 * @since 0.5
	 * @deprecated since 0.11, see {@link #getRegisteredEventListeners(Class,Set)}.
	 */
	@Deprecated(forRemoval = true, since = "0.11")
	def getRegisteredEventListeners(type : Class<T>, collection : Collection<? super T>) : int with T {
		assert type !== null
		assert collection !== null
		var nb = 0
		for (guardedEvaluators : internalDataStructure.values) {
			for (evaluator : guardedEvaluators) {
				val target = evaluator.evaluator.target
				if (type.isInstance(target)) {
					if (collection += type.cast(target)) {
						nb++
					}
				}
			}
		}
		return nb
	}

	/** Extract the registered listeners with the given type.
	 * 
	 * @param <T> the type of the listeners.
	 * @param type the type of the listeners.
	 * @return the listeners.
	 * @since 0.6
	 */
	@Pure
	def getRegisteredEventListeners(type : Class<T>) : ConcurrentSkipListSet<T> with T {
		var result : ConcurrentSkipListSet<T> = new ConcurrentSkipListSet(ObjectComparator::SINGLETON)
		getRegisteredEventListeners(type, result)
		return result
	}

	/** 
	 * Description of a set of guard evaluators with a shared activation guard.
	 *
	 * @author $Author: sgalland$
	 * @version $FullVersion$
	 * @mavengroupid $GroupId$
	 * @mavenartifactid $ArtifactId$
	 * @since 0.11
	 */
	@Data
	static class GuardedEvaluator implements Comparable<GuardedEvaluator> {
	
		val registrationGuard : (Event)=>Boolean

		val evaluator : BehaviorGuardEvaluator

		override compareTo(other : GuardedEvaluator) : int {
			if (other === null) {
				return 1
			}
			return this.evaluator <=> other.evaluator
		}

		override equals(obj : Object) : boolean {
			if (obj instanceof GuardedEvaluator) {
				return this.evaluator == obj.evaluator
			}
			return false
		}

		override hashCode : int {
			return this.evaluator.hashCode
		}

	}

	/** 
	 * Description of an single guard evaluator.
	 * 
	 * @author $Author: sgalland$
	 * @version $FullVersion$
	 * @mavengroupid $GroupId$
	 * @mavenartifactid $ArtifactId$
	 * @since 0.11
	 */
	@Data
	private static class Evaluator {

		val type : Class<? extends Event>

		val methods : Collection<Method>		

	}
	
	/** Iterator on the guard evaluators that are declared into the provided listener.
	 * 
	 * @author $Author: sgalland$
	 * @version $FullVersion$
	 * @mavengroupid $GroupId$
	 * @mavenartifactid $ArtifactId$
	 */
	private static class MethodIterator implements Iterator<Evaluator> {

		val listener : Object

		val methods : Iterator<Entry<Class<? extends Event>, Collection<Method>>>

		new (listener : Object) {
			this.listener = listener
			this.methods = this.listener.class.annotedMethodsPerEvent.entrySet.iterator
		}

		override hasNext : boolean {
			this.methods.hasNext
		}

		override next : Evaluator {
			val element = this.methods.next
			return new Evaluator(element.key, element.value)
		}

	}

}
